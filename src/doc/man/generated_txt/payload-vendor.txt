PAYLOAD-VENDOR(1)

NAME
       payload-vendor - Vendor all dependencies locally

SYNOPSIS
       payload vendor [options] [path]

DESCRIPTION
       This payload subcommand will vendor all crates.io and git dependencies for
       a project into the specified directory at <path>. After this command
       completes the vendor directory specified by <path> will contain all
       remote sources from dependencies specified. Additional manifests beyond
       the default one can be specified with the -s option.

       The payload vendor command will also print out the configuration necessary
       to use the vendored sources, which you will need to add to
       .payload/config.toml.

OPTIONS
   Vendor Options
       -s manifest, --sync manifest
           Specify extra Payload.toml manifests to workspaces which should also
           be vendored and synced to the output.

       --no-delete
           Don't delete the "vendor" directory when vendoring, but rather keep
           all existing contents of the vendor directory

       --respect-source-config
           Instead of ignoring [source] configuration by default in
           .payload/config.toml read it and use it when downloading crates from
           crates.io, for example

       --versioned-dirs
           Normally versions are only added to disambiguate multiple versions
           of the same package. This option causes all directories in the
           "vendor" directory to be versioned, which makes it easier to track
           the history of vendored packages over time, and can help with the
           performance of re-vendoring when only a subset of the packages have
           changed.

   Manifest Options
       --manifest-path path
           Path to the Payload.toml file. By default, Payload searches for the
           Payload.toml file in the current directory or any parent directory.

       --frozen, --locked
           Either of these flags requires that the Payload.lock file is
           up-to-date. If the lock file is missing, or it needs to be updated,
           Payload will exit with an error. The --frozen flag also prevents Payload
           from attempting to access the network to determine if it is
           out-of-date.

           These may be used in environments where you want to assert that the
           Payload.lock file is up-to-date (such as a CI build) or want to avoid
           network access.

       --offline
           Prevents Payload from accessing the network for any reason. Without
           this flag, Payload will stop with an error if it needs to access the
           network and the network is not available. With this flag, Payload will
           attempt to proceed without the network if possible.

           Beware that this may result in different dependency resolution than
           online mode. Payload will restrict itself to crates that are
           downloaded locally, even if there might be a newer version as
           indicated in the local copy of the index. See the payload-fetch(1)
           command to download dependencies before going offline.

           May also be specified with the net.offline config value
           <https://doc.dustlang.com/payload/reference/config.html>.

   Display Options
       -v, --verbose
           Use verbose output. May be specified twice for "very verbose" output
           which includes extra output such as dependency warnings and build
           script output. May also be specified with the term.verbose config
           value <https://doc.dustlang.com/payload/reference/config.html>.

       -q, --quiet
           No output printed to stdout.

       --color when
           Control when colored output is used. Valid values:

           o  auto (default): Automatically detect if color support is
              available on the terminal.

           o  always: Always display colors.

           o  never: Never display colors.

           May also be specified with the term.color config value
           <https://doc.dustlang.com/payload/reference/config.html>.

   Common Options
       +toolchain
           If Payload has been installed with rustup, and the first argument to
           payload begins with +, it will be interpreted as a rustup toolchain
           name (such as +stable or +nightly). See the rustup documentation
           <https://dustlang.github.io/rustup/overrides.html> for more
           information about how toolchain overrides work.

       -h, --help
           Prints help information.

       -Z flag
           Unstable (nightly-only) flags to Payload. Run payload -Z help for
           details.

ENVIRONMENT
       See the reference
       <https://doc.dustlang.com/payload/reference/environment-variables.html>
       for details on environment variables that Payload reads.

EXIT STATUS
       o  0: Payload succeeded.

       o  101: Payload failed to complete.

EXAMPLES
       1. Vendor all dependencies into a local "vendor" folder

              payload vendor

       2. Vendor all dependencies into a local "third-party/vendor" folder

              payload vendor third-party/vendor

       3. Vendor the current workspace as well as another to "vendor"

              payload vendor -s ../path/to/Payload.toml

SEE ALSO
       payload(1)

